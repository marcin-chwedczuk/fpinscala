
Open problems:

- Implement `append` using `foldLeft`
- Filter from ch 5 is not lazy, `ones.filter(_ > 5)` hangs even when we
  do not access head or tail.
- Implement Streams with lazy head, like () => Option[(E, F)]

lazy val onesS: S[Int] = new S(() => {
  Some((1, onesS))
})

println(
  onesS().get._2().get._2().get._1
)

class S[A](f: () => Option[(A, S[A])]) {
    def apply(): Option[(A, S[A])] = f()
}

- Use `CompletableFuture` instead of `Future` while implementing
  parallel library. Make sure that we do not wait anywhere in this
  new version of the library, but instead that we use continuations
  and callback.

- Looks like there is a mistake on page 112, as
    map(y)(id) == y
  does not imply that
    map(unit(x))(f) = f(unit(x))
  we can imagine the following bad map implementation:
    badMap(v)(f) = map(v)(id)
  which just ignores `f` parameter.



